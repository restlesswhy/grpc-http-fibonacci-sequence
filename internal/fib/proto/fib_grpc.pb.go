// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: internal/fib/proto/fib.proto

package fiboService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FiboSequenceServiceClient is the client API for FiboSequenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiboSequenceServiceClient interface {
	Get(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (*FiboResponse, error)
}

type fiboSequenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFiboSequenceServiceClient(cc grpc.ClientConnInterface) FiboSequenceServiceClient {
	return &fiboSequenceServiceClient{cc}
}

func (c *fiboSequenceServiceClient) Get(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (*FiboResponse, error) {
	out := new(FiboResponse)
	err := c.cc.Invoke(ctx, "/fiboService.FiboSequenceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiboSequenceServiceServer is the server API for FiboSequenceService service.
// All implementations must embed UnimplementedFiboSequenceServiceServer
// for forward compatibility
type FiboSequenceServiceServer interface {
	Get(context.Context, *FiboRequest) (*FiboResponse, error)
	mustEmbedUnimplementedFiboSequenceServiceServer()
}

// UnimplementedFiboSequenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFiboSequenceServiceServer struct {
}

func (UnimplementedFiboSequenceServiceServer) Get(context.Context, *FiboRequest) (*FiboResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFiboSequenceServiceServer) mustEmbedUnimplementedFiboSequenceServiceServer() {}

// UnsafeFiboSequenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiboSequenceServiceServer will
// result in compilation errors.
type UnsafeFiboSequenceServiceServer interface {
	mustEmbedUnimplementedFiboSequenceServiceServer()
}

func RegisterFiboSequenceServiceServer(s grpc.ServiceRegistrar, srv FiboSequenceServiceServer) {
	s.RegisterService(&FiboSequenceService_ServiceDesc, srv)
}

func _FiboSequenceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiboRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiboSequenceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiboService.FiboSequenceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiboSequenceServiceServer).Get(ctx, req.(*FiboRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FiboSequenceService_ServiceDesc is the grpc.ServiceDesc for FiboSequenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FiboSequenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fiboService.FiboSequenceService",
	HandlerType: (*FiboSequenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _FiboSequenceService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/fib/proto/fib.proto",
}
